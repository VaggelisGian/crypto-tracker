
import java.awt.BorderLayout;
import java.awt.Container;
import java.awt.FlowLayout;
import static java.awt.event.ActionEvent.ACTION_PERFORMED;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import java.lang.Math;
import java.lang.StringBuffer;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Date;
import java.util.Timer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;









/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author asus
 */
public class App extends javax.swing.JFrame {

    private String firstWord;
    private String tempPrice;
    private String hour1;
    private String day1;
    private String sevenDay1;
    private String tempdayvolume;
    private String tempmarcetCap;
    public String dataa[][] = new String[100][7];

    /**
     * Creates new form App
     */
    
    public App() {
        initComponents();
        setTitle("Crypto View");
        setSize(1050, 542);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        jTable();
        jTable1.setAutoCreateRowSorter(true);
        
        
    }
    
    
    
    
    
    
  
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(jTable1.getModel());
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("Refresh Data");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem1.setText("Save");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        jMenu4.setText("Sort >");

        jMenuItem3.setText("Coin");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem3);

        jMenuItem4.setText("Price");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem4);

        jMenuItem5.setText("1h%");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenuItem8.setText("1d%");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenuItem9.setText("7d%");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenuItem10.setText("Volume");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        jMenuItem11.setText("Marcketcap");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenu2.add(jMenu4);

        jMenu5.setText("Sort <");

        jMenuItem19.setText("Coin");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem19);

        jMenuItem20.setText("Price");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem20);

        jMenuItem21.setText("1h%");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem21);

        jMenuItem22.setText("1d%");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem22);

        jMenuItem23.setText("7d%");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem23);

        jMenuItem24.setText("Volume");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem24ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem24);

        jMenuItem25.setText("Marcketcap");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem25ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem25);

        jMenu2.add(jMenu5);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem2.setText("About");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(13, 13, 13))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jButton1)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jButton1.getAccessibleContext().setAccessibleName("jButton1");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];
        int j = 0;
        
        try {
            final Document document = Jsoup.connect(url).get(); 
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);  
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);  
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);  
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1)); 
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",",""); 
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1)); 
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price; 
                    datadouble[i][1] = hour; 
                    datadouble[i][2] = day;         
                    datadouble[i][3] = sevenDay; 
                    datalong[i][0] = dayvolume; 
                    datalong[i][1] = marcetCap; 


                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice; 
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;        
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1; 
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6); 



                    

                    i++;    
                }      
            }
        }catch (Exception ex) 
        {
            ex.printStackTrace();
        };
        
        DefaultTableModel model = new DefaultTableModel(data, columns);
        jTable1.setModel(model);    
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        
        
        try {
            FileWriter myWriter = new FileWriter("statistics.txt");
            for (int i = 0; i < 100; i++)
            {            
                myWriter.write("Coin"+" || "+"Price"+" || "+"1h%"+" || "+"1d%"+" || "+"7d%"+" || "+"24h Volume"+" || "+"Marketcap"+ "\n");
                myWriter.write(getdata(i,0)+" || "+ getdata(i,1)+" || "+ getdata(i,2)+" || "+ getdata(i,3)+" || "+ getdata(i,4)+" || "+ getdata(i,5)+" || "+ getdata(i,6)+ "\n");
                myWriter.write("---------------------------------------------------------------------"+ "\n");
            }
            myWriter.close();
            System.out.println("Successfully wrote to the file.");
            Path path = Paths.get("statistics.txt");
            System.out.println("Path :"+path.toAbsolutePath());
        } catch (IOException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }

                    
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        String url = "https://github.com/lilvagg/crypto-tracker" ;
        String osName = System.getProperty("os.name");
		try {
			if (osName.startsWith("Windows"))
				Runtime.getRuntime().exec(
						"rundll32 url.dll,FileProtocolHandler " + url);
			else {
				String[] browsers = { "firefox", "opera", "konqueror",
						"epiphany", "mozilla", "netscape" };
				String browser = null;
				for (int count = 0; count < browsers.length && browser == null; count++)
					if (Runtime.getRuntime().exec(
							new String[] { "which", browsers[count] })
							.waitFor() == 0)
						browser = browsers[count];
				Runtime.getRuntime().exec(new String[] { browser, url });
			}
		} catch (Exception e) {
			JOptionPane.showMessageDialog(null, "Error in opening browser"
					+ ":\n" + e.getLocalizedMessage());
		}
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem25ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                long  tmpp = 0;
                if (datalong[i][1]<datalong[j][1] )
                {
                    tmpp = datalong[i][1];
                    datalong[i][1] = datalong[j][1];
                    datalong[j][1] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }
        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }

        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem25ActionPerformed

    private void jMenuItem24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem24ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                long  tmpp = 0;
                if (datalong[i][0]<datalong[j][0] )
                {
                    tmpp = datalong[i][0];
                    datalong[i][0] = datalong[j][0];
                    datalong[j][0] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }
        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }
        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem24ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                double  tmpp = 0;
                if (datadouble[i][3]<datadouble[j][3] )
                {
                    tmpp = datadouble[i][3];
                    datadouble[i][3] = datadouble[j][3];
                    datadouble[j][3] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }
        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }
        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                double  tmpp = 0;
                if (datadouble[i][2]<datadouble[j][2] )
                {
                    tmpp = datadouble[i][2];
                    datadouble[i][2] = datadouble[j][2];
                    datadouble[j][2] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }

        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }
        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                double  tmpp = 0;
                if (datadouble[i][1]<datadouble[j][1] )
                {
                    tmpp = datadouble[i][1];
                    datadouble[i][1] = datadouble[j][1];
                    datadouble[j][1] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }

        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }

        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                double  tmpp = 0;
                if (datadouble[i][0]<datadouble[j][0] )
                {
                    tmpp = datadouble[i][0];
                    datadouble[i][0] = datadouble[j][0];
                    datadouble[j][0] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }
        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }

        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                if (data[i][0].compareTo(data[j][0]) < 0)
                {
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }

        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }

        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                long  tmpp = 0;
                if (datalong[i][1]>datalong[j][1] )
                {
                    tmpp = datalong[i][1];
                    datalong[i][1] = datalong[j][1];
                    datalong[j][1] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }
        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }

        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                long  tmpp = 0;
                if (datalong[i][0]>datalong[j][0] )
                {
                    tmpp = datalong[i][0];
                    datalong[i][0] = datalong[j][0];
                    datalong[j][0] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }

        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }

        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                double  tmpp = 0;
                if (datadouble[i][3]>datadouble[j][3] )
                {
                    tmpp = datadouble[i][3];
                    datadouble[i][3] = datadouble[j][3];
                    datadouble[j][3] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }
        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }

        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                double  tmpp = 0;
                if (datadouble[i][2]>datadouble[j][2] )
                {
                    tmpp = datadouble[i][2];
                    datadouble[i][2] = datadouble[j][2];
                    datadouble[j][2] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }
        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }
        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                double  tmpp = 0;
                if (datadouble[i][1]>datadouble[j][1] )
                {
                    tmpp = datadouble[i][1];
                    datadouble[i][1] = datadouble[j][1];
                    datadouble[j][1] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }
        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }

        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                double  tmpp = 0;
                if (datadouble[i][0]>datadouble[j][0] )
                {
                    tmpp = datadouble[i][0];
                    datadouble[i][0] = datadouble[j][0];
                    datadouble[j][0] = tmpp;
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }
        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }

        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];

        try {
            final Document document = Jsoup.connect(url).get();
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1));
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",","");
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1));
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price;
                    datadouble[i][1] = hour;
                    datadouble[i][2] = day;
                    datadouble[i][3] = sevenDay;
                    datalong[i][0] = dayvolume;
                    datalong[i][1] = marcetCap;

                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice;
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1;
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);

                     

                    i++;
                }
            }
        }catch (Exception ex)
        {
            ex.printStackTrace();
        };

        for (int i = 0; i < 100; i++)
        {
            for (int j = i + 1; j < 100; j++)
            {
                String  tmp = "";
                if (data[i][0].compareTo(data[j][0]) > 0)
                {
                    tmp = data[i][0];
                    data[i][0] = data[j][0];
                    data[j][0] = tmp;
                    tmp = data[i][1];
                    data[i][1]= data[j][1];
                    data[j][1] = tmp;
                    tmp = data[i][2];
                    data[i][2] = data[j][2];
                    data[j][2] = tmp;
                    tmp = data[i][3];
                    data[i][3] = data[j][3];
                    data[j][3] = tmp;
                    tmp = data[i][4];
                    data[i][4] = data[j][4];
                    data[j][4] = tmp;
                    tmp = data[i][5];
                    data[i][5] = data[j][5];
                    data[j][5] = tmp;
                    tmp = data[i][6];
                    data[i][6] = data[j][6];
                    data[j][6] = tmp;
                }
            }
        }
        for (int i = 0; i < 100; i++)
        {
            setdata( data[i][0] , i, 0);

            setdata( data[i][1] , i, 1);

            setdata( data[i][2] , i, 2);

            setdata( data[i][3] , i, 3);

            setdata( data[i][4] , i, 4);

            setdata( data[i][5] , i, 5);

            setdata( data[i][6] , i, 6);
        }
        DefaultTableModel model = new DefaultTableModel(data, columns);

        jTable1.setModel(model);

    }//GEN-LAST:event_jMenuItem3ActionPerformed
   
    
    
    public void jTable() {
        final String url = "https://www.coingecko.com/";
        String columns [] = {"Coin","Price","1h%","1d%","7d%","24h Volume","Marketcap"};
        int rows = 100, column = 7;
        String data [][] = new String [rows][column];
        double datadouble [][] = new double [rows][column-3];
        long datalong [][] = new long [rows][column-5];
       
        
        try {
            final Document document = Jsoup.connect(url).get(); 
            int i=0;
            for (Element row : document.select("table.sort.table.mb-0.text-sm.text-lg-normal.table-scrollable tr"))
            {
                if (row.select("td:nth-of-type(3)").text().equals(""))
                {
                    continue;
                }
                else
                {

                    String name = row.select("td:nth-of-type(3)").text();
                    String arr[] = name.split(" ", 2);
                    final String firstWord = arr[0];                                                    //gia ta prwta 10

                    String tempPrice = row.select("td:nth-of-type(4)").text();
                    String tempPrice1 = tempPrice.replace(",","");            //alazw to , me .
                    final double price = Double.parseDouble(tempPrice1.substring(1)); //jepernaw to $

                    String hour1 = row.select("td:nth-of-type(5)").text();
                    StringBuffer sb= new StringBuffer(hour1);  
                    sb.deleteCharAt(sb.length()-1);                                              //vagzw to %
                    String str = sb.toString();
                    final double hour = Double.parseDouble(str);

                    String day1 = row.select("td:nth-of-type(6)").text();
                    StringBuffer sb1= new StringBuffer(day1);  
                    sb1.deleteCharAt(sb1.length()-1);
                    String str1 = sb1.toString();
                    final double day = Double.parseDouble(str1);

                    String sevenDay1 = row.select("td:nth-of-type(7)").text();
                    StringBuffer sb2= new StringBuffer(sevenDay1);  
                    sb2.deleteCharAt(sb2.length()-1);
                    String str2 = sb2.toString();
                    final double sevenDay = Double.parseDouble(str2);

                    String tempdayvolume = row.select("td:nth-of-type(8)").text();
                    String tempdayvolume1 = tempdayvolume.replace(",","");        //vgazw ola ta ,
                    double dayvolume1 = Double.parseDouble(tempdayvolume1.substring(1)); 
                    final long dayvolume = Math.round(dayvolume1);

                    String tempmarcetCap = row.select("td:nth-of-type(9)").text();
                    String tempmarcetCap1 = tempmarcetCap.replaceAll(",",""); 
                    double marcetCap1 = Double.parseDouble(tempmarcetCap1.substring(1)); 
                    final long marcetCap = Math.round(marcetCap1);

                     

                    datadouble[i][0] = price; 
                    datadouble[i][1] = hour; 
                    datadouble[i][2] = day;         
                    datadouble[i][3] = sevenDay; 
                    datalong[i][0] = dayvolume; 
                    datalong[i][1] = marcetCap; 


                    data[i][0] = firstWord;
                    setdata( firstWord , i, 0);
                    data[i][1] = tempPrice; 
                    setdata( tempPrice , i, 1);
                    data[i][2] = hour1;        
                    setdata( hour1 , i, 2);
                    data[i][3] = day1;
                    setdata( day1 , i, 3);
                    data[i][4] = sevenDay1; 
                    setdata( sevenDay1 , i, 4);
                    data[i][5] = tempdayvolume;
                    setdata( tempdayvolume , i, 5);
                    data[i][6] = tempmarcetCap;
                    setdata( tempmarcetCap , i, 6);



                     

                    i++;    
                }      
            }
        }catch (Exception ex) 
        {
            ex.printStackTrace();
        };
        
        DefaultTableModel model = new DefaultTableModel(data, columns);
        
        jTable1.setModel(model);    
}        
        
    

    public void data (String firstWord,String tempPrice ,String hour1 ,String day1 ,String sevenDay1, String tempdayvolume ,String tempmarcetCap)
    {
        this.firstWord = firstWord;
        this.tempPrice = tempPrice;
        this.hour1 = hour1;
        this.day1 = day1;
        this.sevenDay1 = sevenDay1;
        this.tempdayvolume = tempdayvolume;
        this.tempmarcetCap = tempmarcetCap;
    }
    public void setdata(String data ,int i,int j)
    {
        this.dataa[i][j] = data;
    }
    
    public String getdata( int i,int j)
    {
       return dataa[i][j];
    }
    
    public void setfirstWord(String firstWord)
    {
        this.firstWord = firstWord;
    }

    public void settempPrice(String tempPrice)
    {       
        this.tempPrice = tempPrice;
    }

    public void sethour1(String hour1)
    {
        this.hour1 = hour1;
    }

    public void setday1(String day1)
    {
        this.day1 = day1;
    }

    public void setsevenDay1(String sevenDay1)
    {
        this.sevenDay1 = sevenDay1;
    }

    public void setetos(String tempdayvolume)
    {
        this.tempdayvolume = tempdayvolume;
    }

    public void settempmarcetCap(String tempmarcetCap)
    {
        this.tempmarcetCap = tempmarcetCap;
    }
    
    public String getfirstWord ()
    {
        return firstWord;
    }
    public String gettempPrice()
    {
        return tempPrice;
    }

    public String gethour1()
    {
        return hour1;
    }

    public String getday1()
    {
        return day1;
    }

    public String getsevenDay1()
    {
        return sevenDay1;
    }

    public String gettempdayvolume()
    {
        return tempdayvolume;
    }

    public String gettempmarcetCap()
    {
        return tempmarcetCap;
    }
    
    
    
    
       
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
            
            
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                new App().setVisible(true);
                    
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    

    
}
